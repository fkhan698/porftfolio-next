# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type BlogPost {
  id: ID!
  title: String
  photo: BlogImage
  publishedAt: DateTime
  status: String
  content: BlogPost_content_Document
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type BlogPost_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BlogPostWhereUniqueInput {
  id: ID
}

input BlogPostWhereInput {
  AND: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  NOT: [BlogPostWhereInput!]
  id: IDFilter
  title: StringFilter
  photo: BlogImageWhereInput
  publishedAt: DateTimeNullableFilter
  status: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BlogPostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input BlogPostUpdateInput {
  title: String
  photo: BlogImageRelateToOneForUpdateInput
  publishedAt: DateTime
  status: String
  content: JSON
}

input BlogImageRelateToOneForUpdateInput {
  create: BlogImageCreateInput
  connect: BlogImageWhereUniqueInput
  disconnect: Boolean
}

input BlogPostUpdateArgs {
  where: BlogPostWhereUniqueInput!
  data: BlogPostUpdateInput!
}

input BlogPostCreateInput {
  title: String
  photo: BlogImageRelateToOneForCreateInput
  publishedAt: DateTime
  status: String
  content: JSON
}

input BlogImageRelateToOneForCreateInput {
  create: BlogImageCreateInput
  connect: BlogImageWhereUniqueInput
}

type BlogImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  post: BlogPost
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input BlogImageWhereUniqueInput {
  id: ID
}

input BlogImageWhereInput {
  AND: [BlogImageWhereInput!]
  OR: [BlogImageWhereInput!]
  NOT: [BlogImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  post: BlogPostWhereInput
}

input BlogImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input BlogImageUpdateInput {
  image: Upload
  altText: String
  post: BlogPostRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input BlogPostRelateToOneForUpdateInput {
  create: BlogPostCreateInput
  connect: BlogPostWhereUniqueInput
  disconnect: Boolean
}

input BlogImageUpdateArgs {
  where: BlogImageWhereUniqueInput!
  data: BlogImageUpdateInput!
}

input BlogImageCreateInput {
  image: Upload
  altText: String
  post: BlogPostRelateToOneForCreateInput
}

input BlogPostRelateToOneForCreateInput {
  create: BlogPostCreateInput
  connect: BlogPostWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBlogPost(data: BlogPostCreateInput!): BlogPost
  createBlogPosts(data: [BlogPostCreateInput!]!): [BlogPost]
  updateBlogPost(
    where: BlogPostWhereUniqueInput!
    data: BlogPostUpdateInput!
  ): BlogPost
  updateBlogPosts(data: [BlogPostUpdateArgs!]!): [BlogPost]
  deleteBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  deleteBlogPosts(where: [BlogPostWhereUniqueInput!]!): [BlogPost]
  createBlogImage(data: BlogImageCreateInput!): BlogImage
  createBlogImages(data: [BlogImageCreateInput!]!): [BlogImage]
  updateBlogImage(
    where: BlogImageWhereUniqueInput!
    data: BlogImageUpdateInput!
  ): BlogImage
  updateBlogImages(data: [BlogImageUpdateArgs!]!): [BlogImage]
  deleteBlogImage(where: BlogImageWhereUniqueInput!): BlogImage
  deleteBlogImages(where: [BlogImageWhereUniqueInput!]!): [BlogImage]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  blogPosts(
    where: BlogPostWhereInput! = {}
    orderBy: [BlogPostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BlogPost!]
  blogPost(where: BlogPostWhereUniqueInput!): BlogPost
  blogPostsCount(where: BlogPostWhereInput! = {}): Int
  blogImages(
    where: BlogImageWhereInput! = {}
    orderBy: [BlogImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BlogImage!]
  blogImage(where: BlogImageWhereUniqueInput!): BlogImage
  blogImagesCount(where: BlogImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
